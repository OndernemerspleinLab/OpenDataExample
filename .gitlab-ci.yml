stages:
  - build
  - pre-deploy
  - deploy
  - clean

variables: &variables
  RANCHER_ENV: npo-dop-oapi
  RANCHER_ENV_BRANCH_PREFIX: npo-dop-oapi-
  CONTAINER_IMAGE: oapi

#  ***************************
#  Global directives
#  ***************************

# Force a container to run on a docker runner
.docker-runner: &docker-runner
  tags:
    - docker

.only-master: &only-master
  only:
    - master

.docker-login-before: &docker-login-before
  before_script:
    - &docker-login docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY

# Only run the job when code changed on branches except for develop or master
.only-branches: &only-branches
  only:
    - branches
  except:
    - master
    - develop

#  ***************************
#  Stage: Build
#  ***************************

build:
  <<: *docker-login-before
  stage: build
  script:
    - docker-compose -f docker-compose.ci.yml build --pull
    - docker tag $CONTAINER_IMAGE $CI_REGISTRY_IMAGE/$CONTAINER_IMAGE:$CI_PIPELINE_ID
    - *docker-login
    - docker push $CI_REGISTRY_IMAGE/$CONTAINER_IMAGE:$CI_PIPELINE_ID
    - docker rmi $CONTAINER_IMAGE

#  ***************************
#  Stage: Pre-deploy
#  ***************************

.ams-job-template: &ams-job-template
  <<: *docker-runner
  image: registry.kvk.nl/so-kvk-tool/ams-tooling-cli:latest

.setup_rancher: &setupRancher
  <<: *ams-job-template
  stage: pre-deploy
  script:
    - cps env create.v1 --environment $RANCHER_ENVIRONMENT
    - cps env set_users.v1 --owner dbxraa --owner dbxiaa --owner dbxemo --owner dbxhcu --owner dbxsmh --owner dbxrmr --owner dbxjwr
    - cps env add_hosts.v1 --upto 1
    - cps env enable_elk.v1

setup_rancher:
  <<: *setupRancher
  <<: *only-master
  variables:
    RANCHER_ENVIRONMENT: $RANCHER_ENV

setup_rancher_branch:
  <<: *setupRancher
  <<: *only-branches
  variables:
    RANCHER_ENVIRONMENT: ${RANCHER_ENV_BRANCH_PREFIX}${CI_BUILD_REF_SLUG}

#  ***************************
#  Stage: Deploy
#  ***************************

.deploy_variables: &shared-deploy_variables
  <<: *variables
  IMAGE: ${CI_REGISTRY_IMAGE}/${CONTAINER_IMAGE}:${CI_PIPELINE_ID}
  CUSTOM_RANCHER_URL: $RANCHER_URL
  CUSTOM_RANCHER_ACCESS_KEY: $RANCHER_ACCESS_KEY
  CUSTOM_RANCHER_SECRET_KEY: $RANCHER_SECRET_KEY

.deploy-template: &deploy-template
  <<: *ams-job-template
  stage: deploy
  script:
    - cps env deploy.v1 --stack default --rancher-file rancher-compose.yml --docker-file docker-compose.yml --confirm --batch-size 1 --force

deploy_staging:
  <<: *deploy-template
  <<: *only-master
  environment:
    name: staging
    url: http://web.default.${RANCHER_ENV}.npo.kvk.nl
  variables:
    <<: *shared-deploy_variables
    RANCHER_ENVIRONMENT: $RANCHER_ENV

deploy_branch:
  <<: *deploy-template
  <<: *only-branches
  environment:
    name: &branch-environment branch/${CI_BUILD_REF_SLUG}
    url: http://web.default.${RANCHER_ENV_BRANCH_PREFIX}${CI_BUILD_REF_SLUG}.npo.kvk.nl
    on_stop: stop_branch
  variables:
    <<: *shared-deploy_variables
    RANCHER_ENVIRONMENT: &branch-rancher ${RANCHER_ENV_BRANCH_PREFIX}${CI_BUILD_REF_SLUG}

# Stops the branch environment on Rancher automatically when the branch is merged or deleted.
stop_branch:
  <<: *ams-job-template
  <<: *only-branches
  stage: deploy
  variables:
    GIT_STRATEGY: none
    RANCHER_ENVIRONMENT: *branch-rancher
  when: manual
  script:
    - cps env clean.v1
  environment:
    name: *branch-environment
    action: stop